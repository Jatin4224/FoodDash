-1)manual testing - normal testing  
-2)code for testing (test cases)
-there are three types of testing a developer can do
1)unit testing
-u test your react component in isolation.
2)integrration testing
-there are mulitple components to test .

- 3)end to end testing - e2e testing
  -testing a react application as soon as user landing on page till user leaving the app

//react testing libraries

-install
https://testing-library.com/docs/react-testing-library/intro/

-react testing library is already integrated in create react app.

-React testing library needs -> jest (javascript testing framework )
https://jestjs.io/docs/getting-started

- install
  npm i -D jest

whenever we use jest with babel we have to install some additional dependencies.

- install
  npm install --save-dev babel-jest @babel/core @babel/preset-env

//now this depependies conflict with babel and parcel.
because parcel already uses babel inside it.

-we have to change parcels behaviour we have to make some changes in the parcel.
-read parcel documentation->javascript->babel part

by creating .parcelrc file and
codee -
{
"extends": "@parcel/config-default",
"transformers": {
"\*.{js,mjs,jsx,cjs,ts,tsx}": [
"@parcel/transformer-js",
"@parcel/transformer-react-refresh-wrap"
]
}
}

-ommand to run test cases
npm run test

//before starting writing test cases we have to do one more configuration - jest configuration.

command -
npx jest --init
-no typescript
-js dom or node?-> we choose js dom because js dom is a librabry which gives features of browser.
-add coverage reports ->yes-> bable

-install jsdom library

-create folder name -> **tests** inside components to create all test files.

-we create test function ->
test("description", () => {
const result = sum(3,4);

          //assertion
          expect(result).test(7);

})

## -to make jsx work in testing install library

-npm i @babel/preset-react - to make jsx work in testing
-include @babel/preset-react inside my babel config

- ["@babel/preset-react", { runtime: "automatic" }],

-install
npm i -D @testing-library/jest-dom

//grouping test case - describe block
eg-
describe("Contact us page Test Case", () => {
test("should load contact us component", () => {
render(<Contact />);

    const heading = screen.getByRole("heading");

    //assertion
    expect(heading).toBeInTheDocument();

});

//test case for button
test("should load button inside Contact component", () => {
render(<Contact />);

    const button = screen.getByRole("button");

    //assertion
    expect(button).toBeInTheDocument();

});

//test case name
test("should load input name inside Contact component", () => {
render(<Contact />);

    const inputName = screen.getByPlaceholderText("name");

    //assertion
    expect(inputName).toBeInTheDocument();

});

//test for load 2 input boxes
test("should load 2 input boxes ont he contact component", () => {
render(<Contact />);
//for multiple items - use getALLByRole
const inputBoxes = screen.getAllByRole("textbox");
console.log(inputBoxes.length);

    //Assertion
    expect(inputBoxes.length).toBe(2);

});
});

-we can also write it instead of test.
-do not need to push coverage folder to git put it inside git ignore.

//now we have to check when we load header we have loging button and cart with 0 items or not.
-our jest do not understand redux so we have to provide redux store.same for react router dom.

eg-
it("should load Header component with a loign button", () => {
render(
<BrowserRouter>
<Provider store={appStore}>

<Header />
</Provider>
</BrowserRouter>
);
  const loginButton = screen.getByRole("button"); //good way

expect(loginButton).toBeInTheDocument();
});
});

//suppose there are multiple buttons and i want to find out login button only

const loginButton = screen.getByRole("button",{name: "Login}); //good way

expect(loginButton).toBeInTheDocument();
});
});

-FireEvent -> imported from testing library react.

-we will create mockdata for testing rstaurant card resData.

////integration testing

-testing search functionality.
-very imp ->in our Body component we have fetch ,when we test body component when we write render it renders on js dom (browser like) it does't have superpowers of browser.and fetch is browser superpower.so jest dont understand fetch.
-we have to write mock function for our fetch .

- "watch-test": "jest --watch" in package.json so test cases dont stop .
  -write command-> npm run watch-test

--whenever using fetch,state updates wrap render inside act() function. comes from react-dom/test-utils;
-use async await when usign act.

eg- it("should render the Body component with Search", async () => {
await act(async () => render(<Body />));
});
